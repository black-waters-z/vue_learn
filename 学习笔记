——————————————第一课————————————

在js文件之中，将会导入app.vue中的内容，然后再通过html文件来调用这个js文件
vue的文件位于src之中，vue还可以通过调用其他vue


js代码
import { createApp } from 'vue'
// 从一个单文件组件中导入根组件
import App from './App.vue'

const app = createApp(App)
; 绑定html之中的组建   <div id="app"></div>
app.mount('#app');这叫挂载应用



DOM 中的根组件模板​
根组件的模板通常是组件本身的一部分，但也可以直接通过在挂载容器内编写模板来单独提供：
; <div id="app">
;   <button @click="count++">{{ count }}</button>
; </div>
以上代码是挂载容器，在挂载容器之中编写，@click，还存在其余方法！！！待补充

; import { createApp } from 'vue'

; const app = createApp({
;   data() {
;     return {
;       count: 0
;     }
;   }
; })

; app.mount('#app')
然而还是需要进行挂载应用

应用配置，可以进行捕获错误，使用.config对象
; app.config.errorHandler = (err) => {
;   /* 处理错误 */
; }
应用实例还提供了一些方法来注册应用范围内可用的资源，例如注册一个组件：
; app.component('TodoDeleteButton', TodoDeleteButton) 搞不太懂，之后解决


可以在同一个页面之中创建多个应用实例
; const app1 = createApp({
;   /* ... */
; })
; app1.mount('#container-1')

; const app2 = createApp({
;   /* ... */
; })
; app2.mount('#container-2')


————————————————————————模版语法————————————————————

文本插值，在vue中定义msg的值,
; <span>Message: {{ msg }}</span>
; const app = createApp({
;   data() {
;     return {
;       msg：'这是一个msg的值'
;     }
;   }
; })

双大括号会将数据解释为纯文本，而不是 HTML。若想在双大括号里面插入 HTML，你需要使用 v-html 指令：
; <p>Using text interpolation: {{ rawHtml }}</p> 解释为纯文本
; <p>Using v-html directive: <span v-html="rawHtml"></span></p> 解释为html

; 输出：
; Using text interpolation: <span style="color: red">This should be red.</span>
; Using v-html directive: This should be red.

这里看到的 v-html attribute 被称为一个指令。指令由 v- 作为前缀，
表明它们是一些由 Vue 提供的特殊 attribute
span 的内容将会被替换为 rawHtml 属性的值，插值为纯 HTML——数据绑定将会被忽略。
注意，你不能使用 v-html 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。
在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元;为什么？搞不明白


Attribute 绑定！！！（vue中使用）
双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 v-bind 指令：
<!-- 错误的使用方式 -->
; <div id="app" some-attribute="{{ wrong }}"></div>
正确方式：
; <div v-bind:id="dynamicId"></div>
简写形式：
; <div :id="dynamicId"></div>

; <!-- 与 :id="id" 相同 -->
; <div :id></div>

; <!-- 这也同样有效 -->
; <div v-bind:id></div> 注意！！！只在vue3.4以上版本使用


布尔型 Attribute
布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。
; <button :disabled="isButtonDisabled">Button</button>
当 isButtonDisabled 为真值或一个空字符串 (即 <button disabled="">) 时，元素会包含这个 disabled attribute。而当其为其他假值时 attribute 将被忽略。
布尔型属性的“开启”状态可以通过两种方式来表示：

仅通过属性名称本身来表示，如<input disabled>。
通过属性名称后跟等号和空字符串来表示，如<input disabled=""。
这两种方式在功能上是等价的，都表示该布尔型属性被开启。

需要注意的是，布尔型属性不能有除了空字符串之外的其他值，任何非空字符串值（即使是false）都会被浏览器忽略，而属性仍然会被当作开启状态处理。
对于disabled属性来说，它的默认状态是false，表示表单控件是可用的。当你在HTML元素中添加disabled属性时，不管其后面是否有值，或者值是什么，它都会被浏览器解释为true，即表单控件将被禁用。

以上适用于html代码，但是在js代码之中
; var button = document.querySelector('button');
; button.disabled = false; // 按钮可用


动态绑定多个值​
如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：
; const objectOfAttrs = {
;   id: 'container',
;   class: 'wrapper'
; }
通过不带参数的 v-bind，你可以将它们绑定到单个元素上：
<div v-bind="objectOfAttrs"></div>



